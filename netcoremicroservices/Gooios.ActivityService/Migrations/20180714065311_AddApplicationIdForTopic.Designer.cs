// <auto-generated />
using Gooios.ActivityService.Domains.Aggregates;
using Gooios.ActivityService.Repositories;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace Gooios.ActivityService.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20180714065311_AddApplicationIdForTopic")]
    partial class AddApplicationIdForTopic
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn)
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125");

            modelBuilder.Entity("Gooios.ActivityService.Domains.Aggregates.GrouponActivity", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("Count")
                        .HasColumnName("count");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnName("created_by")
                        .HasMaxLength(80);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on");

                    b.Property<DateTime>("End")
                        .HasColumnName("end");

                    b.Property<DateTime>("LastUpdOn")
                        .HasColumnName("updated_on");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasColumnName("product_id")
                        .HasMaxLength(80);

                    b.Property<string>("ProductMark")
                        .IsRequired()
                        .HasColumnName("product_mark")
                        .HasMaxLength(80);

                    b.Property<DateTime>("Start")
                        .HasColumnName("start");

                    b.Property<int>("Status")
                        .HasColumnName("status");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnName("unit_price");

                    b.HasKey("Id");

                    b.ToTable("groupon_activities");
                });

            modelBuilder.Entity("Gooios.ActivityService.Domains.Aggregates.GrouponParticipation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("BuyCount")
                        .HasColumnName("buy_count");

                    b.Property<string>("GrouponActivityId")
                        .IsRequired()
                        .HasColumnName("groupon_activity_id")
                        .HasMaxLength(80);

                    b.Property<string>("OrderId")
                        .IsRequired()
                        .HasColumnName("order_id")
                        .HasMaxLength(80);

                    b.Property<DateTime>("ParticipateTime")
                        .HasColumnName("participate_time");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnName("user_id")
                        .HasMaxLength(80);

                    b.HasKey("Id");

                    b.ToTable("groupon_participations");
                });

            modelBuilder.Entity("Gooios.ActivityService.Domains.Aggregates.Topic", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("ApplicationId")
                        .HasColumnName("application_id")
                        .HasMaxLength(80);

                    b.Property<string>("Area")
                        .IsRequired()
                        .HasColumnName("area")
                        .HasMaxLength(80);

                    b.Property<int?>("Category")
                        .HasColumnName("category");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnName("city")
                        .HasMaxLength(80);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnName("created_by")
                        .HasMaxLength(80);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on");

                    b.Property<string>("CreatorName")
                        .HasColumnName("creator_name")
                        .HasMaxLength(80);

                    b.Property<string>("CreatorPortraitUrl")
                        .HasColumnName("creator_portrait_url")
                        .HasMaxLength(500);

                    b.Property<string>("CustomTopicUrl")
                        .HasColumnName("custom_topic_url")
                        .HasMaxLength(500);

                    b.Property<DateTime?>("EndDate")
                        .HasColumnName("end_date");

                    b.Property<string>("FaceImageUrl")
                        .IsRequired()
                        .HasColumnName("face_image_url")
                        .HasMaxLength(500);

                    b.Property<string>("Introduction")
                        .IsRequired()
                        .HasColumnName("introduction");

                    b.Property<bool>("IsCustom")
                        .HasColumnName("is_custom");

                    b.Property<bool>("IsSuspend")
                        .HasColumnName("is_suspend");

                    b.Property<string>("LastUpdBy")
                        .HasColumnName("updated_by")
                        .HasMaxLength(80);

                    b.Property<DateTime?>("LastUpdOn")
                        .IsRequired()
                        .HasColumnName("updated_on");

                    b.Property<double>("Latitude")
                        .HasColumnName("latitude");

                    b.Property<double>("Longitude")
                        .HasColumnName("longitude");

                    b.Property<string>("OrganizationId")
                        .HasColumnName("organization_id")
                        .HasMaxLength(80);

                    b.Property<string>("Postcode")
                        .HasColumnName("postcode")
                        .HasMaxLength(80);

                    b.Property<string>("Province")
                        .IsRequired()
                        .HasColumnName("province")
                        .HasMaxLength(80);

                    b.Property<DateTime?>("StartDate")
                        .HasColumnName("start_date");

                    b.Property<string>("StreetAddress")
                        .IsRequired()
                        .HasColumnName("street_address")
                        .HasMaxLength(200);

                    b.Property<string>("Title")
                        .HasColumnName("title")
                        .HasMaxLength(80);

                    b.HasKey("Id");

                    b.ToTable("topics");
                });

            modelBuilder.Entity("Gooios.ActivityService.Domains.Aggregates.TopicImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("ImageId")
                        .IsRequired()
                        .HasColumnName("image_id")
                        .HasMaxLength(80);

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnName("image_url")
                        .HasMaxLength(500);

                    b.Property<int>("Order")
                        .HasColumnName("order");

                    b.Property<string>("TopicId")
                        .IsRequired()
                        .HasColumnName("topic_id")
                        .HasMaxLength(80);

                    b.HasKey("Id");

                    b.ToTable("topic_images");
                });
#pragma warning restore 612, 618
        }
    }
}
