// <auto-generated />
using Gooios.FancyService.Domains.Aggregates;
using Gooios.FancyService.Repositories;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace Gooios.FancyService.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20180521144536_AddApplicationIdForTables")]
    partial class AddApplicationIdForTables
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn)
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125");

            modelBuilder.Entity("Gooios.FancyService.Domains.Aggregates.Category", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("ApplicationId")
                        .IsRequired()
                        .HasColumnName("application_id")
                        .HasMaxLength(80);

                    b.Property<string>("Mark")
                        .IsRequired()
                        .HasColumnName("mark")
                        .HasMaxLength(80);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasMaxLength(80);

                    b.Property<string>("ParentId")
                        .HasColumnName("parent_id")
                        .HasMaxLength(80);

                    b.HasKey("Id");

                    b.ToTable("categories");
                });

            modelBuilder.Entity("Gooios.FancyService.Domains.Aggregates.Comment", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnName("content")
                        .HasMaxLength(500);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnName("created_by")
                        .HasMaxLength(80);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on");

                    b.Property<string>("OrderId")
                        .IsRequired()
                        .HasColumnName("order_id")
                        .HasMaxLength(80);

                    b.Property<string>("ReservationId")
                        .IsRequired()
                        .HasColumnName("reservation_id")
                        .HasMaxLength(80);

                    b.HasKey("Id");

                    b.ToTable("comments");
                });

            modelBuilder.Entity("Gooios.FancyService.Domains.Aggregates.CommentImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("CommentId")
                        .IsRequired()
                        .HasColumnName("comment_id")
                        .HasMaxLength(80);

                    b.Property<string>("ImageId")
                        .IsRequired()
                        .HasColumnName("image_id")
                        .HasMaxLength(80);

                    b.HasKey("Id");

                    b.ToTable("comment_images");
                });

            modelBuilder.Entity("Gooios.FancyService.Domains.Aggregates.CommentTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("CommentId")
                        .IsRequired()
                        .HasColumnName("comment_id")
                        .HasMaxLength(80);

                    b.Property<string>("ReservationId")
                        .IsRequired()
                        .HasColumnName("reservation_id")
                        .HasMaxLength(80);

                    b.Property<string>("TagId")
                        .IsRequired()
                        .HasColumnName("tag_id")
                        .HasMaxLength(80);

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnName("user_id")
                        .HasMaxLength(80);

                    b.HasKey("Id");

                    b.ToTable("comment_tags");
                });

            modelBuilder.Entity("Gooios.FancyService.Domains.Aggregates.Reservation", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTime>("AppointTime")
                        .HasColumnName("appoint_time");

                    b.Property<string>("Area")
                        .IsRequired()
                        .HasColumnName("area")
                        .HasMaxLength(80);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnName("city")
                        .HasMaxLength(80);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnName("created_by")
                        .HasMaxLength(80);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on");

                    b.Property<string>("CustomerMobile")
                        .IsRequired()
                        .HasColumnName("customer_mobile")
                        .HasMaxLength(80);

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasColumnName("customer_name")
                        .HasMaxLength(80);

                    b.Property<string>("LastUpdBy")
                        .HasColumnName("updated_by")
                        .HasMaxLength(80);

                    b.Property<DateTime>("LastUpdOn")
                        .HasColumnName("updated_on");

                    b.Property<double>("Latitude")
                        .HasColumnName("latitude");

                    b.Property<double>("Longitude")
                        .HasColumnName("longitude");

                    b.Property<string>("OrderId")
                        .HasColumnName("order_id")
                        .HasMaxLength(80);

                    b.Property<string>("OrganizationId")
                        .HasColumnName("organization_id")
                        .HasMaxLength(80);

                    b.Property<string>("Postcode")
                        .IsRequired()
                        .HasColumnName("postcode")
                        .HasMaxLength(80);

                    b.Property<string>("Province")
                        .IsRequired()
                        .HasColumnName("province")
                        .HasMaxLength(80);

                    b.Property<string>("ReservationNo")
                        .IsRequired()
                        .HasColumnName("reservation_no")
                        .HasMaxLength(80);

                    b.Property<string>("ServiceId")
                        .HasColumnName("service_id")
                        .HasMaxLength(80);

                    b.Property<string>("ServicerId")
                        .HasColumnName("servicer_id")
                        .HasMaxLength(80);

                    b.Property<decimal>("SincerityGoldNeedToPay")
                        .HasColumnName("sincerity_gold_need_to_pay");

                    b.Property<int>("Status")
                        .HasColumnName("status");

                    b.Property<string>("StreetAddress")
                        .IsRequired()
                        .HasColumnName("street_address")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("reservations");
                });

            modelBuilder.Entity("Gooios.FancyService.Domains.Aggregates.Service", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("ApplicationId")
                        .IsRequired()
                        .HasColumnName("application_id")
                        .HasMaxLength(80);

                    b.Property<string>("Area")
                        .IsRequired()
                        .HasColumnName("area")
                        .HasMaxLength(80);

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnName("category")
                        .HasMaxLength(80);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnName("city")
                        .HasMaxLength(80);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnName("created_by")
                        .HasMaxLength(80);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on");

                    b.Property<string>("Introduction")
                        .IsRequired()
                        .HasColumnName("introduction");

                    b.Property<bool>("IsAdvertisement")
                        .HasColumnName("is_advertisement");

                    b.Property<string>("LastUpdBy")
                        .HasColumnName("updated_by")
                        .HasMaxLength(80);

                    b.Property<DateTime>("LastUpdOn")
                        .HasColumnName("updated_at")
                        .HasMaxLength(80);

                    b.Property<double>("Latitude")
                        .HasColumnName("latitude");

                    b.Property<double>("Longitude")
                        .HasColumnName("longitude");

                    b.Property<string>("OrganizationId")
                        .IsRequired()
                        .HasColumnName("organization_id")
                        .HasMaxLength(80);

                    b.Property<string>("PersonalizedPageUri")
                        .HasColumnName("personalized_page_uri")
                        .HasMaxLength(500);

                    b.Property<string>("Postcode")
                        .IsRequired()
                        .HasColumnName("postcode")
                        .HasMaxLength(80);

                    b.Property<string>("Province")
                        .IsRequired()
                        .HasColumnName("province")
                        .HasMaxLength(80);

                    b.Property<int>("ServeScope")
                        .HasColumnName("serve_scope");

                    b.Property<decimal>("SincerityGold")
                        .HasColumnName("sincerity_gold");

                    b.Property<int>("Status")
                        .HasColumnName("status");

                    b.Property<string>("StreetAddress")
                        .IsRequired()
                        .HasColumnName("street_address")
                        .HasMaxLength(80);

                    b.Property<string>("SubCategory")
                        .HasColumnName("sub_category")
                        .HasMaxLength(80);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("title")
                        .HasMaxLength(80);

                    b.HasKey("Id");

                    b.ToTable("services");
                });

            modelBuilder.Entity("Gooios.FancyService.Domains.Aggregates.ServiceImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on");

                    b.Property<string>("ImageId")
                        .IsRequired()
                        .HasColumnName("image_id")
                        .HasMaxLength(80);

                    b.Property<string>("ServiceId")
                        .IsRequired()
                        .HasColumnName("service_id")
                        .HasMaxLength(80);

                    b.HasKey("Id");

                    b.ToTable("service_images");
                });

            modelBuilder.Entity("Gooios.FancyService.Domains.Aggregates.Servicer", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("ApplicationId")
                        .IsRequired()
                        .HasColumnName("application_id")
                        .HasMaxLength(80);

                    b.Property<string>("Area")
                        .IsRequired()
                        .HasColumnName("area")
                        .HasMaxLength(80);

                    b.Property<DateTime>("BirthDay")
                        .HasColumnName("birth_day");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnName("category")
                        .HasMaxLength(80);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnName("city")
                        .HasMaxLength(80);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnName("created_by")
                        .HasMaxLength(80);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on");

                    b.Property<int>("Gender")
                        .HasColumnName("gender");

                    b.Property<bool>("IsSuspend")
                        .HasColumnName("is_suspend");

                    b.Property<string>("JobNumber")
                        .IsRequired()
                        .HasColumnName("job_number")
                        .HasMaxLength(80);

                    b.Property<string>("LastUpdBy")
                        .HasColumnName("updated_by")
                        .HasMaxLength(80);

                    b.Property<DateTime>("LastUpdOn")
                        .HasColumnName("updated_at")
                        .HasMaxLength(80);

                    b.Property<double>("Latitude")
                        .HasColumnName("latitude");

                    b.Property<double>("Longitude")
                        .HasColumnName("longitude");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasMaxLength(80);

                    b.Property<string>("OrganizationId")
                        .IsRequired()
                        .HasColumnName("organization_id")
                        .HasMaxLength(80);

                    b.Property<string>("PersonalIntroduction")
                        .IsRequired()
                        .HasColumnName("personal_introduction");

                    b.Property<string>("PortraitImageId")
                        .IsRequired()
                        .HasColumnName("portrait_image_id")
                        .HasMaxLength(80);

                    b.Property<string>("Postcode")
                        .IsRequired()
                        .HasColumnName("postcode")
                        .HasMaxLength(80);

                    b.Property<string>("Province")
                        .IsRequired()
                        .HasColumnName("province")
                        .HasMaxLength(80);

                    b.Property<decimal>("SincerityGold")
                        .HasColumnName("SincerityGold");

                    b.Property<double>("SincerityGoldRate")
                        .HasColumnName("sincerity_gold_rate");

                    b.Property<DateTime>("StartRelevantWorkTime")
                        .HasColumnName("start_relevant_work_time");

                    b.Property<string>("StreetAddress")
                        .IsRequired()
                        .HasColumnName("street_address")
                        .HasMaxLength(200);

                    b.Property<string>("SubCategory")
                        .IsRequired()
                        .HasColumnName("sub_category")
                        .HasMaxLength(80);

                    b.Property<int>("TechnicalGrade")
                        .HasColumnName("technical_grade");

                    b.Property<string>("TechnicalTitle")
                        .IsRequired()
                        .HasColumnName("technical_title")
                        .HasMaxLength(80);

                    b.HasKey("Id");

                    b.ToTable("servicers");
                });

            modelBuilder.Entity("Gooios.FancyService.Domains.Aggregates.ServicerImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on");

                    b.Property<string>("ImageId")
                        .IsRequired()
                        .HasColumnName("image_id")
                        .HasMaxLength(80);

                    b.Property<string>("ServicerId")
                        .IsRequired()
                        .HasColumnName("servicer_id")
                        .HasMaxLength(80);

                    b.HasKey("Id");

                    b.ToTable("servicer_images");
                });

            modelBuilder.Entity("Gooios.FancyService.Domains.Aggregates.Tag", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("CategoryId")
                        .IsRequired()
                        .HasColumnName("category_id")
                        .HasMaxLength(80);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnName("created_by")
                        .HasMaxLength(80);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasMaxLength(80);

                    b.HasKey("Id");

                    b.ToTable("tags");
                });
#pragma warning restore 612, 618
        }
    }
}
