// <auto-generated />
using Gooios.AuthorizationService.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace Gooios.AuthorizationService.Data.Migrations.ConfigurationCustomDb
{
    [DbContext(typeof(ConfigurationCustomDbContext))]
    [Migration("20171230120228_InitConfigurationCustomDb")]
    partial class InitConfigurationCustomDb
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn)
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125");

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ApiResource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<string>("DisplayName")
                        .HasColumnName("display_name");

                    b.Property<bool>("Enabled")
                        .HasColumnName("enabled");

                    b.Property<string>("Name")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("api_resources");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ApiResourceClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("ApiResourceId")
                        .HasColumnName("api_resource_id");

                    b.Property<string>("Type")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.HasIndex("ApiResourceId");

                    b.ToTable("api_resource_claims");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ApiScope", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("ApiResourceId")
                        .HasColumnName("api_resource_id");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<string>("DisplayName")
                        .HasColumnName("display_name");

                    b.Property<bool>("Emphasize")
                        .HasColumnName("emphasize");

                    b.Property<string>("Name")
                        .HasColumnName("name");

                    b.Property<bool>("Required")
                        .HasColumnName("required");

                    b.Property<bool>("ShowInDiscoveryDocument")
                        .HasColumnName("show_in_discovery_document");

                    b.HasKey("Id");

                    b.HasIndex("ApiResourceId");

                    b.ToTable("api_scopes");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ApiScopeClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("ApiScopeId")
                        .HasColumnName("api_scope_id");

                    b.Property<string>("Type")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.HasIndex("ApiScopeId");

                    b.ToTable("api_scope_claims");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ApiSecret", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("ApiResourceId")
                        .HasColumnName("api_resource_id");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<DateTime?>("Expiration")
                        .HasColumnName("expiration");

                    b.Property<string>("Type")
                        .HasColumnName("type");

                    b.Property<string>("Value")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.HasIndex("ApiResourceId");

                    b.ToTable("api_secrets");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("AbsoluteRefreshTokenLifetime")
                        .HasColumnName("absolute_refresh_token_lifetime");

                    b.Property<int>("AccessTokenLifetime")
                        .HasColumnName("access_token_lifetime");

                    b.Property<int>("AccessTokenType")
                        .HasColumnName("access_token_type");

                    b.Property<bool>("AllowAccessTokensViaBrowser")
                        .HasColumnName("allow_access_tokens_via_browser");

                    b.Property<bool>("AllowOfflineAccess")
                        .HasColumnName("allow_offline_access");

                    b.Property<bool>("AllowPlainTextPkce")
                        .HasColumnName("allow_plain_text_pkce");

                    b.Property<bool>("AllowRememberConsent")
                        .HasColumnName("allow_remember_consent");

                    b.Property<bool>("AlwaysIncludeUserClaimsInIdToken")
                        .HasColumnName("always_include_user_claims_in_id_token");

                    b.Property<bool>("AlwaysSendClientClaims")
                        .HasColumnName("always_send_client_claims");

                    b.Property<int>("AuthorizationCodeLifetime")
                        .HasColumnName("authorization_code_lifetime");

                    b.Property<bool>("BackChannelLogoutSessionRequired")
                        .HasColumnName("back_channel_logout_session_required");

                    b.Property<string>("BackChannelLogoutUri")
                        .HasColumnName("back_channel_logout_uri");

                    b.Property<string>("ClientClaimsPrefix")
                        .HasColumnName("client_claims_prefix");

                    b.Property<string>("ClientId")
                        .HasColumnName("client_id");

                    b.Property<string>("ClientName")
                        .HasColumnName("client_name");

                    b.Property<string>("ClientUri")
                        .HasColumnName("client_uri");

                    b.Property<int?>("ConsentLifetime")
                        .HasColumnName("consent_lifetime");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<bool>("EnableLocalLogin")
                        .HasColumnName("enable_local_login");

                    b.Property<bool>("Enabled")
                        .HasColumnName("enabled");

                    b.Property<bool>("FrontChannelLogoutSessionRequired")
                        .HasColumnName("front_channel_logout_session_required");

                    b.Property<string>("FrontChannelLogoutUri")
                        .HasColumnName("front_channel_logout_uri");

                    b.Property<int>("IdentityTokenLifetime")
                        .HasColumnName("identity_token_lifetime");

                    b.Property<bool>("IncludeJwtId")
                        .HasColumnName("include_jwt_id");

                    b.Property<string>("LogoUri")
                        .HasColumnName("logo_uri");

                    b.Property<string>("PairWiseSubjectSalt")
                        .HasColumnName("pair_wise_subject_salt");

                    b.Property<string>("ProtocolType")
                        .HasColumnName("protocol_type");

                    b.Property<int>("RefreshTokenExpiration")
                        .HasColumnName("refresh_token_expiration");

                    b.Property<int>("RefreshTokenUsage")
                        .HasColumnName("refresh_token_usage");

                    b.Property<bool>("RequireClientSecret")
                        .HasColumnName("require_client_secret");

                    b.Property<bool>("RequireConsent")
                        .HasColumnName("require_consent");

                    b.Property<bool>("RequirePkce")
                        .HasColumnName("require_pkce");

                    b.Property<int>("SlidingRefreshTokenLifetime")
                        .HasColumnName("sliding_refresh_token_lifetime");

                    b.Property<bool>("UpdateAccessTokenClaimsOnRefresh")
                        .HasColumnName("update_access_token_claims_on_refresh");

                    b.HasKey("Id");

                    b.ToTable("clients");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ClientClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("ClientId")
                        .HasColumnName("client_id");

                    b.Property<string>("Type")
                        .HasColumnName("type");

                    b.Property<string>("Value")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("client_claims");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ClientCorsOrigin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("ClientId")
                        .HasColumnName("client_id");

                    b.Property<string>("Origin")
                        .HasColumnName("origin");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("client_cors_origins");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ClientGrantType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("ClientId")
                        .HasColumnName("client_id");

                    b.Property<string>("GrantType");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("client_grant_types");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ClientIdPRestriction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("ClientId")
                        .HasColumnName("client_id");

                    b.Property<string>("Provider")
                        .HasColumnName("provider");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("client_id_prestrictions");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ClientPostLogoutRedirectUri", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("ClientId")
                        .HasColumnName("client_id");

                    b.Property<string>("PostLogoutRedirectUri")
                        .HasColumnName("post_logout_redirect_uri");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("client_post_logout_redirect_uris");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ClientProperty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("ClientId")
                        .HasColumnName("client_id");

                    b.Property<string>("Key")
                        .HasColumnName("key");

                    b.Property<string>("Value")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("client_properties");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ClientRedirectUri", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("ClientId")
                        .HasColumnName("client_id");

                    b.Property<string>("RedirectUri")
                        .HasColumnName("redirect_uri");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("client_redirect_uris");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ClientScope", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("ClientId")
                        .HasColumnName("client_id");

                    b.Property<string>("Scope")
                        .HasColumnName("scope");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("client_scopes");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ClientSecret", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("ClientId")
                        .HasColumnName("client_id");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<DateTime?>("Expiration")
                        .HasColumnName("expiration");

                    b.Property<string>("Type")
                        .HasColumnName("type");

                    b.Property<string>("Value")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("client_secrets");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.IdentityClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("IdentityResourceId")
                        .HasColumnName("identity_resource_id");

                    b.Property<string>("Type")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.HasIndex("IdentityResourceId");

                    b.ToTable("identity_claims");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.IdentityResource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<string>("DisplayName")
                        .HasColumnName("display_name");

                    b.Property<bool>("Emphasize")
                        .HasColumnName("emphasize");

                    b.Property<bool>("Enabled")
                        .HasColumnName("enabled");

                    b.Property<string>("Name")
                        .HasColumnName("name");

                    b.Property<bool>("Required")
                        .HasColumnName("required");

                    b.Property<bool>("ShowInDiscoveryDocument")
                        .HasColumnName("show_in_discovery_document");

                    b.HasKey("Id");

                    b.ToTable("identity_resources");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ApiResourceClaim", b =>
                {
                    b.HasOne("IdentityServer4.EntityFramework.Entities.ApiResource", "ApiResource")
                        .WithMany("UserClaims")
                        .HasForeignKey("ApiResourceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ApiScope", b =>
                {
                    b.HasOne("IdentityServer4.EntityFramework.Entities.ApiResource", "ApiResource")
                        .WithMany("Scopes")
                        .HasForeignKey("ApiResourceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ApiScopeClaim", b =>
                {
                    b.HasOne("IdentityServer4.EntityFramework.Entities.ApiScope", "ApiScope")
                        .WithMany("UserClaims")
                        .HasForeignKey("ApiScopeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ApiSecret", b =>
                {
                    b.HasOne("IdentityServer4.EntityFramework.Entities.ApiResource", "ApiResource")
                        .WithMany("Secrets")
                        .HasForeignKey("ApiResourceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ClientClaim", b =>
                {
                    b.HasOne("IdentityServer4.EntityFramework.Entities.Client", "Client")
                        .WithMany("Claims")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ClientCorsOrigin", b =>
                {
                    b.HasOne("IdentityServer4.EntityFramework.Entities.Client", "Client")
                        .WithMany("AllowedCorsOrigins")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ClientGrantType", b =>
                {
                    b.HasOne("IdentityServer4.EntityFramework.Entities.Client", "Client")
                        .WithMany("AllowedGrantTypes")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ClientIdPRestriction", b =>
                {
                    b.HasOne("IdentityServer4.EntityFramework.Entities.Client", "Client")
                        .WithMany("IdentityProviderRestrictions")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ClientPostLogoutRedirectUri", b =>
                {
                    b.HasOne("IdentityServer4.EntityFramework.Entities.Client", "Client")
                        .WithMany("PostLogoutRedirectUris")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ClientProperty", b =>
                {
                    b.HasOne("IdentityServer4.EntityFramework.Entities.Client", "Client")
                        .WithMany("Properties")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ClientRedirectUri", b =>
                {
                    b.HasOne("IdentityServer4.EntityFramework.Entities.Client", "Client")
                        .WithMany("RedirectUris")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ClientScope", b =>
                {
                    b.HasOne("IdentityServer4.EntityFramework.Entities.Client", "Client")
                        .WithMany("AllowedScopes")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ClientSecret", b =>
                {
                    b.HasOne("IdentityServer4.EntityFramework.Entities.Client", "Client")
                        .WithMany("ClientSecrets")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.IdentityClaim", b =>
                {
                    b.HasOne("IdentityServer4.EntityFramework.Entities.IdentityResource", "IdentityResource")
                        .WithMany("UserClaims")
                        .HasForeignKey("IdentityResourceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
